# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Admin {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AdminWhereUniqueInput {
  id: ID
  email: String
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AdminOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AdminUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input AdminUpdateArgs {
  where: AdminWhereUniqueInput!
  data: AdminUpdateInput!
}

input AdminCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  shippingAddress: String
  aptRoomNum: String
  city: String
  state: String
  zipcode: String
  credits: Int
  createdAt: DateTime
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  shippingAddress: StringFilter
  aptRoomNum: StringFilter
  city: StringFilter
  state: StringFilter
  zipcode: StringFilter
  credits: IntFilter
  createdAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  shippingAddress: OrderDirection
  aptRoomNum: OrderDirection
  city: OrderDirection
  state: OrderDirection
  zipcode: OrderDirection
  credits: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  shippingAddress: String
  aptRoomNum: String
  city: String
  state: String
  zipcode: String
  credits: Int
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  shippingAddress: String
  aptRoomNum: String
  city: String
  state: String
  zipcode: String
  credits: Int
  createdAt: DateTime
}

type Book {
  id: ID!
  isbn: String
  quantity: Int
  title: String
  author: String
  genre: String
  language: String
  description: String
  publisher: String
  publicationDate: String
}

input BookWhereUniqueInput {
  id: ID
}

input BookWhereInput {
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
  id: IDFilter
  isbn: StringFilter
  quantity: IntFilter
  title: StringFilter
  author: StringFilter
  genre: StringNullableFilter
  language: StringFilter
  description: StringFilter
  publisher: StringFilter
  publicationDate: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BookOrderByInput {
  id: OrderDirection
  isbn: OrderDirection
  quantity: OrderDirection
  title: OrderDirection
  author: OrderDirection
  genre: OrderDirection
  language: OrderDirection
  description: OrderDirection
  publisher: OrderDirection
  publicationDate: OrderDirection
}

input BookUpdateInput {
  isbn: String
  quantity: Int
  title: String
  author: String
  genre: String
  language: String
  description: String
  publisher: String
  publicationDate: String
}

input BookUpdateArgs {
  where: BookWhereUniqueInput!
  data: BookUpdateInput!
}

input BookCreateInput {
  isbn: String
  quantity: Int
  title: String
  author: String
  genre: String
  language: String
  description: String
  publisher: String
  publicationDate: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin
  createAdmins(data: [AdminCreateInput!]!): [Admin]
  updateAdmin(where: AdminWhereUniqueInput!, data: AdminUpdateInput!): Admin
  updateAdmins(data: [AdminUpdateArgs!]!): [Admin]
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteAdmins(where: [AdminWhereUniqueInput!]!): [Admin]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBook(data: BookCreateInput!): Book
  createBooks(data: [BookCreateInput!]!): [Book]
  updateBook(where: BookWhereUniqueInput!, data: BookUpdateInput!): Book
  updateBooks(data: [BookUpdateArgs!]!): [Book]
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteBooks(where: [BookWhereUniqueInput!]!): [Book]
  endSession: Boolean!
  authenticateAdminWithPassword(email: String!, password: String!): AdminAuthenticationWithPasswordResult
  createInitialAdmin(data: CreateInitialAdminInput!): AdminAuthenticationWithPasswordSuccess!
}

union AdminAuthenticationWithPasswordResult = AdminAuthenticationWithPasswordSuccess | AdminAuthenticationWithPasswordFailure

type AdminAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Admin!
}

type AdminAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialAdminInput {
  name: String
  email: String
  password: String
}

type Query {
  admins(where: AdminWhereInput! = {}, orderBy: [AdminOrderByInput!]! = [], take: Int, skip: Int! = 0): [Admin!]
  admin(where: AdminWhereUniqueInput!): Admin
  adminsCount(where: AdminWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  books(where: BookWhereInput! = {}, orderBy: [BookOrderByInput!]! = [], take: Int, skip: Int! = 0): [Book!]
  book(where: BookWhereUniqueInput!): Book
  booksCount(where: BookWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Admin

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
